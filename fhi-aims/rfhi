#!/bin/bash
#******************************************************#
#                                                      #
#               Script for running CP2K                #
#     Intended to work with the SLURM queue system     #
#      within the Constance/Deception HPC systems      #
#                                                      #
#        Benjamin Jackson, Auburn University           #
#                 baj0040@auburn.edu                   #
#                                                      #
#                Updated: 08/18/2022                   #
#                                                      #
#******************************************************#
Main(){
	FNAME=$(echo ${!#} | awk -F. '{print $1}')
	##Defaults:
	TIME=8-00:00:00
	QTYPE=g
	NODES=1
	THREADS=1
	SCR_CLEAN=true #Setting to autoclean FHI job folders in scratch
  ##Default paths:
	#SUBDIR=$(pwd)
	SUBDIR=/home/$(whoami)/.subfiles
	WRKDIR=$(pwd)
	SCRDIR=/scratch/$(whoami)/fhia/${FNAME}
	BACKUPDIR=/home/$(whoami)/trash/overwrite
	SCRIPT_PATH=$( dirname "$(readlink -f "$0")" )
	##Modules
	FHIAims_MODULE=fhi-aims/2021 

	#Begin Program
	if [[ "$#" -lt 1 ]]; then Helpfn; exit; fi #Calls help function if no passed variables
	if [[ ! -e ${FNAME}.ctrl ]]; then echo "Input file was not found"; exit 30; fi
	if [[ ! -d ${SCRDIR} ]]; then mkdir -p ${SCRDIR}; fi
	if [[ ! -d ${BACKUPDIR} ]]; then mkdir -p ${BACKUPDIR}; fi 
	if [[ ${ALT_ERROR_LOCATION} = true ]]; then
		SUBDIR=/people/$(whoami)/.subfiles;	mkdir -p ${SUBDIR}; else SUBDIR=${WRKDIR};	fi
	Option_Handler "$@";
	if [[ -z ${JOBNAME} ]]; then JOBNAME=${FNAME}; fi;
	Time_Converter;
  Queue_Set;
	Resources_Check;
	#Maint_Check;
	Batch_Builder;
	if [[ ${STOP_MARKER} == 1 ]]; then 
		if [[  ${SUBDIR} == ${WRKDIR} ]]; then exit;
		else mv ${SUBDIR}/${FNAME}.batch ${WRKDIR}/; exit; fi
	fi
	sbatch ${SUBDIR}/${FNAME}.batch
	rm -f ${SUBDIR}/${FNAME}.batch
}
Option_Handler(){
	while getopts ":ghen:c:m:t:q:p:rh:" option; do
		case $option in
			h) Helpfn; exit;;          #Call help function and exit
			n) NODES_SET=$OPTARG;;     #Number of Nodes
			c) NPROC_SET=$OPTARG;;     #Number of processors, not yet implemented fully
			r) RESTART_OPT="true";;
			m) MEM=$( echo $OPTARG | sed 's/GB//' );; #Memory Request
			t) TIME=$OPTARG;;          #HOUR:MINUTES
			q) QTYPE=$OPTARG;;         #Define the partition 
			h) THREADS=$OPTARG;;       #Define the number of threads
			g) STOP_MARKER=1;;		     #Create batch file then exit; do not start job
			e) EMAIL_MARKER=1;;        #Used to trigger email notifications
		esac
	done
}
Time_Converter(){
 #Function for converting the time request to correct format/calculating total seconds, and job cut-off
 #days-hours:minutes:seconds
	if [[ ${TIME} =~ ^[[:digit:]]+$ ]]; then
		DAY=${TIME}
		elif [[ ${TIME} =~ ^([0-9]+)-([0-9]+):([0-9]+)(:)?([0-9]*)$ ]]; then
			DAY=${BASH_REMATCH[1]}; HOUR=${BASH_REMATCH[2]}; MINUTE=${BASH_REMATCH[3]}; SECOND=${BASH_REMATCH[5]}
		elif [[ ${TIME} =~ ^([0-9]+):([0-9]+)(:)?([0-9]*)$ ]]; then
			HOUR=${BASH_REMATCH[1]}; MINUTE=${BASH_REMATCH[2]}; SECOND=${BASH_REMATCH[4]}
		else echo "There is an error with your time specification: ${TIME}"; exit
	fi
	if [[ -z ${DAY} ]]; then DAY=0; fi
	if [[ -z ${HOUR} ]]; then HOUR=0; fi
	if [[ -z ${MINUTE} ]]; then MINUTE=0; fi
	if [[ -z ${SECOND} ]]; then SECOND=0; fi
	TIME_FORMAT=$( echo ${DAY}-${HOUR}:${MINUTE}:${SECOND})
	#TIME_SEC=$(( ${DAY}*24*3600 + ${HOUR}*3600 + ${MINUTE}*60 + ${SECOND} ))
	#TIME_SEC_SHIFT=$(( ${DAY}*24*3600 + ${HOUR}*3600 + ${MINUTE}*60 + ${SECOND} - 300 ))
}
Queue_Set(){
	QTYPE=$( echo $QTYPE | awk '{print tolower($0)}' )
	case ${QTYPE} in
		[bB]2) NMAX=48; MEMMAX=384; QUEUE="bigmem2";;
		[rR][bB]2) NMAX=48; MEMMAX=384; QUEUE="ezm0048_bg2";;
		[bB]4) NMAX=48; MEMMAX=768; QUEUE="bigmem4";;
		[Aa]) NMAX=128; MEMMAX=256; QUEUE="amd";;
		[Aa][Mm][Dd]) NMAX=128; MEMMAX=256; QUEUE="amd";;
		[Gg][Pp][Uu]2) NMAX=48; MEMMAX=384; QUEUE="gpu2";;
		[Gg][Pp][Uu]4) NMAX=48; MEMMAX=768; QUEUE="gpu4";;
		[Rr]) NMAX=48; MEMMAX=192; QUEUE="ezm0048_std";;
		[nN]) NMAX=28; MEMMAX=125; QUEUE="nova";;
		*) NMAX=48; MEMMAX=192; QUEUE="general";;
	esac
}
Resources_Check(){
	if [[ -n ${NODES_SET} ]] && [[ -z ${NPROC_SET} ]]; then
		NODES=${NODES_SET}; TASK_PER_NODE=${NMAX}; NPROC=$(( ${NMAX} * ${NODES} ))  #Edit here for adding threading settings
	elif [[ -n ${NPROC_SET} ]]; then
	if [[ -z ${NODES_SET} ]] || [[ ${NODES_SET} == 1 ]]; then
		NPROC=${NPROC_SET}; TASK_PER_NODE=${NPROC_SET}; NODES=1 #Edit here for adding threading settings
			if [[ ${NPROC} -gt ${NMAX} ]]; then echo "You have requested more processors than is available on one node (${NMAX})"; exit; fi
		elif [[ ${NODES_SET} -ne 1 ]]; then #Add functionality for specifying NPROC per nodes in this way
			NODES=${NODES_SET}; TASK_PER_NODE=${NPROC_SET}; NPROC=$(( ${NPROC_SET} * ${NODES} ))
		fi
	else
		NODES=1; NPROC=${NMAX}; TASK_PER_NODE=${NMAX}
	fi
}
Batch_Builder(){
	TAB="$(printf '\t')"
	if [[ ${EMAIL_MARKER} == 1 ]]; then EMAIL_OPTION="#SBATCH --mail-type=END,FAIL,REQUEUE,TIME_LIMIT_90";
		else	EMAIL_OPTION="#SBATCH --mail-type=NONE"; fi
	if [[ ${RESTART_OPT} -ne "true" ]]; then RESTART_OPTION="#SBATCH --no-requeue"; fi
	Opening_Gen;
	FHIAims_Gen;
	Closer_Gen;
}
Proc_Handler(){
#This is not currently used; add functionality for multi-threading
	if [[ ${THREADS} == 1 ]]; then
		:
	fi
}
Opening_Gen(){
#	Creates the opening section with Slurm settings
	cat > ${SUBDIR}/${FNAME}.batch <<- EOF
		#!/bin/bash  
		#SBATCH --partition=${QUEUE}
		#SBATCH --time=${TIME_FORMAT}
		#SBATCH --nodes=${NODES}
		#SBATCH --ntasks-per-node=${TASK_PER_NODE}
		#SBATCH --cpus-per-task=${THREADS}
		#SBATCH --job-name=${JOBNAME}.fhi
		#SBATCH --error=${SUBDIR}/${FNAME}.err%j
		#SBATCH --output=${SUBDIR}/${FNAME}.err%j
		#SBATCH --mail-user=$(whoami)@auburn.edu
		${EMAIL_OPTION}
		${RESTART_OPTION}
		export OMP_NUM_THREADS=${THREADS}
		ulimit -s unlimited
		ulimit -f unlimited
		SUBDIR=${SUBDIR}
		SCRDIR=${SCRDIR}
		WRKDIR=${WRKDIR}
		FNAME=${FNAME}
	EOF
}
FHIAims_Gen(){
	if [[ ${SCR_CLEAN} == "true" ]]; then rm -f ${SCRDIR}/*in; rm -f ${SCRDIR}/*out; rm -f ${SCRDIR}/band*out; rm -f ${SCRDIR}/*cube; fi
	cat >> ${SUBDIR}/${FNAME}.batch <<- EOF
		NPROC=${NPROC}
		module -q load ${FHIAims_MODULE}
		cp \${WRKDIR}/\${FNAME}.geom \${SCRDIR}/geometry.in
		cp \${WRKDIR}/\${FNAME}.ctrl \${SCRDIR}/control.in
		cd \${SCRDIR}
		mpirun -n \${NPROC} aims.210226.scalapack.mpi.x > \${WRKDIR}/\${FNAME}.out
		bandorg.py --IsJob --HomeDir \${WRKDIR} \${FNAME}
		cd \${WRKDIR}
		${SCRIPT_PATH}/fhicube ${FNAME}.out
	EOF
}
Closer_Gen(){
	cat >> ${SUBDIR}/${FNAME}.batch <<- EOF
		# Clean up Script, deletes empty error files or moves to WRKDIR if not empty and the exit code
		if [[ ! -s \${SUBDIR}/\${FNAME}.err\${SLURM_JOB_ID} ]]; then
		${TAB} rm -f \${SUBDIR}/\${FNAME}.err\${SLURM_JOB_ID}
		elif [[ -s \${SUBDIR}/\${FNAME}.err\${SLURM_JOB_ID} ]] && [[ \${WRKDIR} != \${SUBDIR} ]]; then
		${TAB} mv \${SUBDIR}/\${FNAME}.err\${SLURM_JOB_ID} \${WRKDIR}/\${FNAME}.e\${SLURM_JOB_ID}
		fi
		exit 0
	EOF
}
Helpfn(){
echo "
You have run the rfhi job submission script for FHI-Aims 2022. This script will automatically create a batch job for you. 

The output files will automatically be placed in the current directory.
Input files must be of the form:  [file].ctrl and [file].geom
Output files will be of the form: [file].out

      Options:
       -h    |   Help, displays this current usage guide
       -n    |   Number of Processors Requested
       -m    |   Memory Requested in GB; Specifying the GB units is optional- this is not currently used 
       -t    |   Time Limit for Jobs in HR:MIN format
       -N    |   Number of nodes to run on; this is unnecessary as the nodes will be determined by your resources request
       -q    |   Which queue this job will be submitted to; Options: b2- bigmem2, rb2- Investor bigmem2, b4-bigmem4, a-amd,
             |      gpu-GPU2, r-Investor general, g- general nodes       

You may specify these in any order, but the file name must be the last value specified. 

If -n, -m, -t, and -q are not specified default values will be used.

Your current defaults are:
       Proc    =   ${NPROC}
       Time    =   ${TIME}
       Queue   =   ${QTYPE}/$(Queue_Set)
You can change this in $(echo $0)

EXAMPLE:
$(echo $0) -n 12 -t 10:00 -q b2 file.ctrl 
"
}
Main "$@"; exit

